{"version":3,"sources":["../../src/StyleProvider.js"],"names":["ThemeContext","theme","getDefaultTheme","foregroundColor","useTheme","StyleProvider","props","state","createTheme","prevProps","style","setState","children","Children","only","Component","propTypes","element","isRequired","object","defaultProps"],"mappings":"+oBAAA,4B;AACA,qC;AACA,8B;;AAEO,GAAMA,mCAAe,yBAAc;AACxCC,MAAO,gBAAMC,eAAN,EADiC;AAExCC,gBAAiB,IAFuB,CAAd,CAArB;;;AAKA,GAAMC,2BAAW,QAAXA,SAAW,SAAM,sBAAWJ,YAAX,CAAN,EAAjB,C;;;;;AAKcK,a;;;;;;;;;;AAUnB,uBAAYC,KAAZ,CAAmB;AACXA,KADW;AAEjB,MAAKC,KAAL,CAAa;AACXN,MAAO,MAAKO,WAAL,CAAiBF,KAAjB,CADI,CAAb,CAFiB;;AAKlB,C;;AAEkBG,S,CAAW;AAC5B,GAAIA,UAAUC,KAAV,GAAoB,KAAKJ,KAAL,CAAWI,KAAnC,CAA0C;AACxC,KAAKC,QAAL,CAAc;AACZV,MAAO,KAAKO,WAAL,CAAiB,KAAKF,KAAtB,CADK,CAAd;;AAGD;AACF,C;;AAEWA,K,CAAO;AACjB,MAAO,qBAAUA,MAAMI,KAAhB,CAAP;AACD,C;;AAEQ;AACCE,QADD,CACc,KAAKN,KADnB,CACCM,QADD;AAECX,KAFD,CAEW,KAAKM,KAFhB,CAECN,KAFD;;AAIP;AACE,8BAAC,YAAD,CAAc,QAAd,EAAuB,MAAO,CAAEA,WAAF,CAA9B;AACG,gBAAMY,QAAN,CAAeC,IAAf,CAAoBF,QAApB,CADH,CADF;;;AAKD,C,2BAtCwC,gBAAMG,S,EAA5BV,a,CACZW,S,CAAY,CACjBJ,SAAU,oBAAUK,OAAV,CAAkBC,UADX,CAEjBR,MAAO,oBAAUS,MAFA,C,CADAd,a,CAMZe,Y,CAAe,CACpBV,MAAO,EADa,C,iBANHL,a","file":"StyleProvider.js","sourcesContent":["import React, { createContext, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Theme from \"./Theme\";\n\nexport const ThemeContext = createContext({\n  theme: Theme.getDefaultTheme(),\n  foregroundColor: null,\n});\n\nexport const useTheme = () => useContext(ThemeContext);\n\n/**\n *  Provides a theme to child components trough context.\n */\nexport default class StyleProvider extends React.Component {\n  static propTypes = {\n    children: PropTypes.element.isRequired,\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    style: {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: this.createTheme(props),\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.style !== this.props.style) {\n      this.setState({\n        theme: this.createTheme(this.props),\n      });\n    }\n  }\n\n  createTheme(props) {\n    return new Theme(props.style);\n  }\n\n  render() {\n    const { children } = this.props;\n    const { theme } = this.state;\n\n    return (\n      <ThemeContext.Provider value={{ theme }}>\n        {React.Children.only(children)}\n      </ThemeContext.Provider>\n    );\n  }\n}\n"]}